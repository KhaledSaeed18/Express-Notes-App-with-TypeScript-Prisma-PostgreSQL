import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
    console.log('üå± Starting database seeding...');

    // Create a demo user first
    const hashedPassword = await bcrypt.hash('DemoUser123!', 10);

    const demoUser = await prisma.user.upsert({
        where: { email: 'demo@example.com' },
        update: {},
        create: {
            email: 'demo@example.com',
            username: 'demouser',
            password: hashedPassword,
        },
    });

    console.log('‚úÖ Demo user created:', demoUser.email);

    // Sample notes data
    const notesData = [
        {
            title: 'Welcome to Your Notes App',
            content: 'This is your first note! You can create, edit, and delete notes to organize your thoughts and ideas. This note management system supports full CRUD operations with secure authentication.',
        },
        {
            title: 'Project Ideas',
            content: 'Here are some exciting project ideas to work on:\n\n‚Ä¢ Build a task management app with React and Node.js\n‚Ä¢ Create a personal blog with Next.js and MongoDB\n‚Ä¢ Develop a weather dashboard using OpenWeatherMap API\n‚Ä¢ Design a expense tracker with charts and analytics\n‚Ä¢ Build a real-time chat application with Socket.io',
        },
        {
            title: 'Learning Goals for 2025',
            content: 'My learning objectives for this year:\n\n1. Master TypeScript and advanced JavaScript patterns\n2. Learn Docker and containerization\n3. Explore microservices architecture\n4. Get proficient with GraphQL and Apollo\n5. Study system design principles\n6. Contribute to open-source projects\n7. Build a production-ready full-stack application',
        },
        {
            title: 'Recipe: Homemade Pizza',
            content: 'Ingredients:\n‚Ä¢ 2 cups all-purpose flour\n‚Ä¢ 1 cup warm water\n‚Ä¢ 1 tsp active dry yeast\n‚Ä¢ 1 tsp salt\n‚Ä¢ 2 tbsp olive oil\n‚Ä¢ Pizza sauce\n‚Ä¢ Mozzarella cheese\n‚Ä¢ Your favorite toppings\n\nInstructions:\n1. Mix yeast with warm water, let sit for 5 minutes\n2. Combine flour and salt, add yeast mixture and olive oil\n3. Knead for 8-10 minutes until smooth\n4. Let rise for 1 hour\n5. Roll out, add toppings, bake at 475¬∞F for 12-15 minutes',
        },
        {
            title: 'Book Recommendations',
            content: 'Must-read books for developers:\n\nüìö Technical Books:\n‚Ä¢ "Clean Code" by Robert C. Martin\n‚Ä¢ "Design Patterns" by Gang of Four\n‚Ä¢ "System Design Interview" by Alex Xu\n‚Ä¢ "You Don\'t Know JS" by Kyle Simpson\n\nüìö General Development:\n‚Ä¢ "The Pragmatic Programmer" by Andy Hunt\n‚Ä¢ "Atomic Habits" by James Clear\n‚Ä¢ "The Lean Startup" by Eric Ries',
        },
        {
            title: 'Travel Plans',
            content: 'Places I want to visit:\n\nüåç Europe:\n‚Ä¢ Paris, France - Visit the Louvre and Eiffel Tower\n‚Ä¢ Rome, Italy - Explore ancient history and cuisine\n‚Ä¢ Amsterdam, Netherlands - Canals and museums\n\nüåè Asia:\n‚Ä¢ Tokyo, Japan - Experience modern culture and technology\n‚Ä¢ Seoul, South Korea - K-pop culture and street food\n‚Ä¢ Bangkok, Thailand - Temples and night markets\n\nüåé Americas:\n‚Ä¢ New York City, USA - Broadway shows and Central Park\n‚Ä¢ Vancouver, Canada - Nature and city life balance',
        },
        {
            title: 'Daily Routine',
            content: '‚è∞ My ideal daily schedule:\n\n6:00 AM - Wake up, drink water\n6:30 AM - Morning workout or yoga\n7:30 AM - Shower and breakfast\n8:30 AM - Review daily goals\n9:00 AM - Deep work session (coding/writing)\n12:00 PM - Lunch break\n1:00 PM - Emails and communication\n2:00 PM - Meetings or collaborative work\n4:00 PM - Learning new skills\n6:00 PM - Dinner and family time\n8:00 PM - Reading or relaxation\n10:00 PM - Prepare for tomorrow, sleep',
        },
        {
            title: 'Health & Fitness Goals',
            content: 'üí™ My health objectives:\n\nüèÉ‚Äç‚ôÇÔ∏è Exercise:\n‚Ä¢ Run 3 times per week (5K minimum)\n‚Ä¢ Strength training 2 times per week\n‚Ä¢ Yoga or stretching daily\n‚Ä¢ Try rock climbing or hiking monthly\n\nü•ó Nutrition:\n‚Ä¢ Drink 8 glasses of water daily\n‚Ä¢ Eat 5 servings of fruits and vegetables\n‚Ä¢ Meal prep on Sundays\n‚Ä¢ Limit processed foods and sugar\n\nüò¥ Sleep:\n‚Ä¢ Get 7-8 hours of sleep nightly\n‚Ä¢ No screens 1 hour before bed\n‚Ä¢ Maintain consistent sleep schedule',
        },
        {
            title: 'Side Project: Weather App',
            content: 'üå§Ô∏è Building a weather dashboard:\n\nFeatures to implement:\n‚Ä¢ Current weather conditions\n‚Ä¢ 7-day forecast\n‚Ä¢ Interactive maps\n‚Ä¢ Location-based weather alerts\n‚Ä¢ Historical weather data\n‚Ä¢ Weather widget for websites\n\nTech Stack:\n‚Ä¢ Frontend: React with TypeScript\n‚Ä¢ Backend: Node.js with Express\n‚Ä¢ Database: PostgreSQL\n‚Ä¢ API: OpenWeatherMap\n‚Ä¢ Deployment: Vercel + Railway\n\nProgress:\n‚úÖ API integration complete\n‚úÖ Basic UI components\nüîÑ Working on responsive design\nüìÖ Testing phase next week',
        },
        {
            title: 'Meeting Notes: Team Standup',
            content: 'üìÖ Date: July 12, 2025\nüë• Attendees: Development Team\n\nüéØ Sprint Goals:\n‚Ä¢ Complete user authentication module\n‚Ä¢ Implement note search functionality\n‚Ä¢ Add pagination to notes list\n‚Ä¢ Write comprehensive tests\n‚Ä¢ Update API documentation\n\nüöÄ Yesterday\'s Progress:\n‚Ä¢ Fixed authentication middleware bug\n‚Ä¢ Added rate limiting to API endpoints\n‚Ä¢ Improved error handling\n\nüéØ Today\'s Tasks:\n‚Ä¢ Implement note sharing feature\n‚Ä¢ Review pull requests\n‚Ä¢ Update deployment scripts\n\nüöß Blockers:\n‚Ä¢ Waiting for database migration approval\n‚Ä¢ Need design feedback on new UI components',
        },
        {
            title: 'Grocery List',
            content: 'üõí Shopping List:\n\nü•¨ Vegetables:\n‚Ä¢ Spinach\n‚Ä¢ Broccoli\n‚Ä¢ Bell peppers\n‚Ä¢ Onions\n‚Ä¢ Tomatoes\n‚Ä¢ Carrots\n‚Ä¢ Potatoes\n\nüçé Fruits:\n‚Ä¢ Bananas\n‚Ä¢ Apples\n‚Ä¢ Oranges\n‚Ä¢ Berries\n\nü•õ Dairy:\n‚Ä¢ Milk\n‚Ä¢ Greek yogurt\n‚Ä¢ Cheese\n‚Ä¢ Eggs\n\nüçñ Protein:\n‚Ä¢ Chicken breast\n‚Ä¢ Salmon\n‚Ä¢ Tofu\n‚Ä¢ Beans\n\nüåæ Pantry:\n‚Ä¢ Rice\n‚Ä¢ Pasta\n‚Ä¢ Bread\n‚Ä¢ Olive oil\n‚Ä¢ Spices',
        },
        {
            title: 'Debugging Tips',
            content: 'üêõ Essential debugging strategies:\n\n1. **Read Error Messages Carefully**\n   ‚Ä¢ Don\'t skip the stack trace\n   ‚Ä¢ Look for line numbers and file names\n   ‚Ä¢ Understand the error type\n\n2. **Use Console Logging Effectively**\n   ‚Ä¢ Log variable values at different points\n   ‚Ä¢ Use descriptive log messages\n   ‚Ä¢ Remove logs before production\n\n3. **Divide and Conquer**\n   ‚Ä¢ Comment out code sections\n   ‚Ä¢ Test individual functions\n   ‚Ä¢ Use breakpoints strategically\n\n4. **Check Common Issues**\n   ‚Ä¢ Typos in variable names\n   ‚Ä¢ Missing imports or dependencies\n   ‚Ä¢ Incorrect data types\n   ‚Ä¢ Async/await issues\n\n5. **Use Developer Tools**\n   ‚Ä¢ Browser DevTools for frontend\n   ‚Ä¢ Network tab for API issues\n   ‚Ä¢ Database query logs\n   ‚Ä¢ IDE debugging features',
        },
        {
            title: 'Database Design Notes',
            content: 'üóÑÔ∏è Database Design Best Practices:\n\n**Normalization:**\n‚Ä¢ 1NF: Eliminate repeating groups\n‚Ä¢ 2NF: Remove partial dependencies\n‚Ä¢ 3NF: Remove transitive dependencies\n\n**Indexing Strategy:**\n‚Ä¢ Index frequently queried columns\n‚Ä¢ Composite indexes for multi-column queries\n‚Ä¢ Monitor index usage and performance\n\n**Relationships:**\n‚Ä¢ One-to-One: User profile data\n‚Ä¢ One-to-Many: User has many notes\n‚Ä¢ Many-to-Many: Users can share notes\n\n**Data Types:**\n‚Ä¢ Use appropriate sizes (VARCHAR vs TEXT)\n‚Ä¢ Consider timezone for DATETIME fields\n‚Ä¢ Use UUIDs for distributed systems\n\n**Security:**\n‚Ä¢ Hash passwords with bcrypt\n‚Ä¢ Validate input data\n‚Ä¢ Use parameterized queries\n‚Ä¢ Implement proper access controls',
        },
        {
            title: 'API Documentation Guidelines',
            content: 'üìö Writing excellent API documentation:\n\n**Essential Elements:**\n‚Ä¢ Clear endpoint descriptions\n‚Ä¢ Request/response examples\n‚Ä¢ Parameter specifications\n‚Ä¢ Error code explanations\n‚Ä¢ Authentication requirements\n\n**Best Practices:**\n‚Ä¢ Use consistent formatting\n‚Ä¢ Include code examples in multiple languages\n‚Ä¢ Provide interactive testing tools\n‚Ä¢ Keep documentation up-to-date\n‚Ä¢ Add troubleshooting sections\n\n**Tools to Consider:**\n‚Ä¢ Swagger/OpenAPI for REST APIs\n‚Ä¢ Postman for testing and documentation\n‚Ä¢ Insomnia for API development\n‚Ä¢ GraphQL Playground for GraphQL APIs\n\n**Documentation Structure:**\n1. Quick start guide\n2. Authentication\n3. Endpoints reference\n4. Error handling\n5. Rate limiting\n6. SDKs and libraries\n7. Changelog',
        },
        {
            title: 'Code Review Checklist',
            content: '‚úÖ Code Review Guidelines:\n\n**Functionality:**\n‚Ä¢ Does the code work as intended?\n‚Ä¢ Are edge cases handled?\n‚Ä¢ Is error handling comprehensive?\n‚Ä¢ Are there any potential bugs?\n\n**Code Quality:**\n‚Ä¢ Is the code readable and well-organized?\n‚Ä¢ Are variable names descriptive?\n‚Ä¢ Is there proper commenting?\n‚Ä¢ Are functions/methods single-purpose?\n\n**Performance:**\n‚Ä¢ Are there any performance bottlenecks?\n‚Ä¢ Is database usage optimized?\n‚Ä¢ Are expensive operations necessary?\n‚Ä¢ Could caching improve performance?\n\n**Security:**\n‚Ä¢ Is user input properly validated?\n‚Ä¢ Are there any security vulnerabilities?\n‚Ä¢ Is sensitive data properly protected?\n‚Ä¢ Are authentication checks in place?\n\n**Testing:**\n‚Ä¢ Are there adequate unit tests?\n‚Ä¢ Do integration tests cover key flows?\n‚Ä¢ Are test cases comprehensive?\n‚Ä¢ Is test coverage acceptable?\n\n**Style:**\n‚Ä¢ Does code follow project conventions?\n‚Ä¢ Is formatting consistent?\n‚Ä¢ Are imports organized properly?',
        },
    ];

    // Create notes for the demo user
    console.log('üóíÔ∏è  Creating sample notes...');

    for (const noteData of notesData) {
        const note = await prisma.note.upsert({
            where: {
                id: `note-${noteData.title.toLowerCase().replace(/[^a-z0-9]/g, '-').substring(0, 20)}`,
            },
            update: {},
            create: {
                title: noteData.title,
                content: noteData.content,
                userId: demoUser.id,
            },
        });

        console.log(`‚úÖ Created note: ${note.title}`);
    }

    console.log('üéâ Database seeding completed successfully!');
    console.log(`üìä Summary:`);
    console.log(`   ‚Ä¢ 1 user created (${demoUser.email})`);
    console.log(`   ‚Ä¢ ${notesData.length} notes created`);
    console.log(`\nüîê Demo login credentials:`);
    console.log(`   Email: demo@example.com`);
    console.log(`   Password: DemoUser123!`);
}

main()
    .then(async () => {
        await prisma.$disconnect();
    })
    .catch(async (e) => {
        console.error('‚ùå Error during seeding:', e);
        await prisma.$disconnect();
        process.exit(1);
    });
